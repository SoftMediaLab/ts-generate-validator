// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`codegen/dog create validators: generated validators at "src/generated/validators/model.ts" 1`] = `
"/* This file was automatically generated and should not be edited */
// tslint:disable
/* eslint-disable */

import {
  GeneratedValidation,
  ValidationConfig,
  ValidationError,
  ValidationException,
  Data,
  UserContext,
  getConfig,
  mergeDeep,
  typeValidator,
  minLengthValidator,
  maxLengthValidator,
  minValidator,
  maxValidator,
  integerValidator,
  lessThanValidator
} from 'ts-generate-validator';

import { userValidator } from './nestedModel.model';

import { Dog } from './../../../model';

export const dogValidator: GeneratedValidation = <D extends Data = typeof Dog, C extends UserContext = UserContext>(
  data: D,
  configArg?: ValidationConfig,
  context?: C
) => {
  const config = <ValidationConfig>mergeDeep({}, getConfig(), configArg ?? {});
  const errors: ValidationError[] = [];

  try {
    typeValidator({
      property: data?.name,
      propertyName: 'name',
      data,
      config,
      context,

      type: 'string'
    });

    minLengthValidator({
      property: data?.name,
      propertyName: 'name',
      data,
      config,
      context,

      threshold: 5
    });

    maxLengthValidator({
      property: data?.name,
      propertyName: 'name',
      data,
      config,
      context,

      threshold: 20
    });

    typeValidator({
      property: data?.age,
      propertyName: 'age',
      data,
      config,
      context,

      type: 'number'
    });

    minValidator({
      property: data?.age,
      propertyName: 'age',
      data,
      config,
      context,

      threshold: 2,

      customMessage: 'only dogs over 2 years old are accepted'
    });

    maxValidator({
      property: data?.age,
      propertyName: 'age',
      data,
      config,
      context,

      threshold: 16,

      customMessage: \\"dogs can't live that long\\"
    });

    integerValidator({
      property: data?.age,
      propertyName: 'age',
      data,
      config,
      context,

      customMessage: 'age must be an integer value'
    });

    typeValidator({
      property: data?.ownedYears,
      propertyName: 'ownedYears',
      data,
      config,
      context,

      type: 'number'
    });

    lessThanValidator({
      property: data?.ownedYears,
      propertyName: 'ownedYears',
      data,
      config,
      context,

      targetPropertyName: 'age',

      customMessage: \\"dog can't be owned by anyone longer than his age\\"
    });

    typeValidator({
      property: data?.owner,
      propertyName: 'owner',
      data,
      config,
      context,

      typeDescription: userValidator,

      type: 'nested'
    });
  } catch (err) {
    if (!(err instanceof ValidationError)) {
      throw err;
    }

    errors.push(err);

    if (config.stopAtFirstError) {
      throw new ValidationException(errors);
    }
  }

  if (errors.length) {
    throw new ValidationException(errors);
  }
};
"
`;

exports[`codegen/dog create validators: generated validators at "src/generated/validators/nestedModel.model.ts" 1`] = `
"/* This file was automatically generated and should not be edited */
// tslint:disable
/* eslint-disable */

import {
  GeneratedValidation,
  ValidationConfig,
  ValidationError,
  ValidationException,
  Data,
  UserContext,
  getConfig,
  mergeDeep,
  typeValidator
} from 'ts-generate-validator';

import { User } from './../../../nestedModel/model';

export const userValidator: GeneratedValidation = <D extends Data = typeof User, C extends UserContext = UserContext>(
  data: D,
  configArg?: ValidationConfig,
  context?: C
) => {
  const config = <ValidationConfig>mergeDeep({}, getConfig(), configArg ?? {});
  const errors: ValidationError[] = [];

  try {
    typeValidator({
      property: data?.name,
      propertyName: 'name',
      data,
      config,
      context,

      type: 'string'
    });

    typeValidator({
      property: data?.surname,
      propertyName: 'surname',
      data,
      config,
      context,

      type: 'string'
    });
  } catch (err) {
    if (!(err instanceof ValidationError)) {
      throw err;
    }

    errors.push(err);

    if (config.stopAtFirstError) {
      throw new ValidationException(errors);
    }
  }

  if (errors.length) {
    throw new ValidationException(errors);
  }
};
"
`;

exports[`codegen/dog parse & prepare: data for render 1`] = `
Array [
  Object {
    "fileName": "model.ts",
    "filePath": "src/generated/validators",
    "imports": Array [
      Object {
        "clauses": "GeneratedValidation, ValidationConfig, ValidationError, ValidationException, Data, UserContext, getConfig, mergeDeep, typeValidator, minLengthValidator, maxLengthValidator, minValidator, maxValidator, integerValidator, lessThanValidator",
        "path": "ts-generate-validator",
      },
      Object {
        "clauses": "userValidator",
        "path": "./nestedModel.model",
      },
      Object {
        "clauses": "Dog",
        "path": "./../../../model",
      },
    ],
    "validations": Array [
      Object {
        "async": false,
        "items": Array [
          Object {
            "propertyName": "name",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "string",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "name",
            "validatorName": "minLengthValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "5",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "name",
            "validatorName": "maxLengthValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "20",
              },
            ],
          },
          Object {
            "propertyName": "age",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "number",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "age",
            "validatorName": "minValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "2",
              },
              Object {
                "property": "customMessage",
                "type": "string",
                "value": "only dogs over 2 years old are accepted",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "age",
            "validatorName": "maxValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "16",
              },
              Object {
                "property": "customMessage",
                "type": "string",
                "value": "dogs can\\\\'t live that long",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "age",
            "validatorName": "integerValidator",
            "validatorPayload": Array [
              Object {
                "property": "customMessage",
                "type": "string",
                "value": "age must be an integer value",
              },
            ],
          },
          Object {
            "propertyName": "ownedYears",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "number",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "ownedYears",
            "validatorName": "lessThanValidator",
            "validatorPayload": Array [
              Object {
                "property": "targetPropertyName",
                "type": "string",
                "value": "age",
              },
              Object {
                "property": "customMessage",
                "type": "string",
                "value": "dog can\\\\'t be owned by anyone longer than his age",
              },
            ],
          },
          Object {
            "propertyName": "owner",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "typeDescription",
                "type": "object",
                "value": "userValidator",
              },
              Object {
                "property": "type",
                "type": "string",
                "value": "nested",
              },
            ],
          },
        ],
        "modelClassName": "Dog",
        "name": "dogValidator",
      },
    ],
  },
  Object {
    "fileName": "nestedModel.model.ts",
    "filePath": "src/generated/validators",
    "imports": Array [
      Object {
        "clauses": "GeneratedValidation, ValidationConfig, ValidationError, ValidationException, Data, UserContext, getConfig, mergeDeep, typeValidator",
        "path": "ts-generate-validator",
      },
      Object {
        "clauses": "User",
        "path": "./../../../nestedModel/model",
      },
    ],
    "validations": Array [
      Object {
        "async": false,
        "items": Array [
          Object {
            "propertyName": "name",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "string",
              },
            ],
          },
          Object {
            "propertyName": "surname",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "string",
              },
            ],
          },
        ],
        "modelClassName": "User",
        "name": "userValidator",
      },
    ],
  },
]
`;

exports[`codegen/dog parse & prepare: parsed metadata 1`] = `
Array [
  Object {
    "classes": Array [
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  5,
                ],
                "name": "MinLengthValidation",
              },
              Object {
                "arguments": Array [
                  20,
                ],
                "name": "MaxLengthValidation",
              },
            ],
            "name": "name",
            "optional": false,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  2,
                  "only dogs over 2 years old are accepted",
                ],
                "name": "MinValidation",
              },
              Object {
                "arguments": Array [
                  16,
                  "dogs can't live that long",
                ],
                "name": "MaxValidation",
              },
              Object {
                "arguments": Array [
                  "age must be an integer value",
                ],
                "name": "IntegerValidation",
              },
            ],
            "name": "age",
            "optional": false,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  "age",
                  "dog can't be owned by anyone longer than his age",
                ],
                "name": "LessThanValidation",
              },
            ],
            "name": "ownedYears",
            "optional": false,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
          Object {
            "decorators": Array [],
            "name": "owner",
            "optional": true,
            "type": Object {
              "name": "User",
              "referencePath": "nestedModel/model.ts",
              "validationType": "nested",
            },
          },
        ],
        "name": "Dog",
      },
    ],
    "functions": Array [],
    "imports": Array [
      Object {
        "absPath": "../../../src/decorators/index",
        "clauses": Array [
          "MinLengthValidation",
          "MaxLengthValidation",
          "MinValidation",
          "MaxValidation",
          "IntegerValidation",
          "LessThanValidation",
        ],
      },
      Object {
        "absPath": "nestedModel/model",
        "clauses": Array [
          "User",
        ],
      },
      Object {
        "absPath": "../../../src/decorators",
        "clauses": Array [
          "Validation",
        ],
      },
    ],
    "name": "model.ts",
  },
  Object {
    "classes": Array [
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [],
            "name": "name",
            "optional": false,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
          Object {
            "decorators": Array [],
            "name": "surname",
            "optional": false,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
        ],
        "name": "User",
      },
    ],
    "functions": Array [],
    "imports": Array [
      Object {
        "absPath": "../../../src/decorators/index",
        "clauses": Array [
          "Validation",
        ],
      },
    ],
    "name": "nestedModel/model.ts",
  },
  Object {
    "classes": Array [],
    "functions": Array [
      Object {
        "isExported": false,
        "name": "emptyDecorator",
      },
      Object {
        "isExported": true,
        "name": "RequiredOneOfValidation",
      },
      Object {
        "isExported": true,
        "name": "TypeValidation",
      },
      Object {
        "isExported": true,
        "name": "CustomValidation",
      },
      Object {
        "isExported": true,
        "name": "IgnoreValidation",
      },
      Object {
        "isExported": true,
        "name": "EqualValidation",
      },
      Object {
        "isExported": true,
        "name": "EqualToValidation",
      },
      Object {
        "isExported": true,
        "name": "MinValidation",
      },
      Object {
        "isExported": true,
        "name": "MaxValidation",
      },
      Object {
        "isExported": true,
        "name": "NegativeValidation",
      },
      Object {
        "isExported": true,
        "name": "PositiveValidation",
      },
      Object {
        "isExported": true,
        "name": "IntegerValidation",
      },
      Object {
        "isExported": true,
        "name": "FloatValidation",
      },
      Object {
        "isExported": true,
        "name": "LessThanValidation",
      },
      Object {
        "isExported": true,
        "name": "MoreThanValidation",
      },
      Object {
        "isExported": true,
        "name": "TrimValidation",
      },
      Object {
        "isExported": true,
        "name": "LowercaseValidation",
      },
      Object {
        "isExported": true,
        "name": "UppercaseValidation",
      },
      Object {
        "isExported": true,
        "name": "MinLengthValidation",
      },
      Object {
        "isExported": true,
        "name": "MaxLengthValidation",
      },
      Object {
        "isExported": true,
        "name": "EmailValidation",
      },
      Object {
        "isExported": true,
        "name": "UrlValidation",
      },
      Object {
        "isExported": true,
        "name": "MatchValidation",
      },
    ],
    "imports": Array [
      Object {
        "absPath": "../../../src/validators/model",
        "clauses": Array [
          "CustomValidationFunction",
        ],
      },
      Object {
        "absPath": "../../../src/codegen/model",
        "clauses": Array [
          "Data",
        ],
      },
      Object {
        "absPath": "../../../src/localization/model",
        "clauses": Array [
          "Message",
        ],
      },
    ],
    "name": "../../../src/decorators/index",
  },
  Object {
    "classes": Array [],
    "functions": Array [],
    "imports": Array [
      Object {
        "absPath": "../../../src/decorators/index",
        "clauses": Array [
          "Validation",
        ],
      },
    ],
    "name": "nestedModel/model",
  },
  Object {
    "classes": Array [],
    "functions": Array [
      Object {
        "isExported": false,
        "name": "emptyDecorator",
      },
      Object {
        "isExported": true,
        "name": "RequiredOneOfValidation",
      },
      Object {
        "isExported": true,
        "name": "TypeValidation",
      },
      Object {
        "isExported": true,
        "name": "CustomValidation",
      },
      Object {
        "isExported": true,
        "name": "IgnoreValidation",
      },
      Object {
        "isExported": true,
        "name": "EqualValidation",
      },
      Object {
        "isExported": true,
        "name": "EqualToValidation",
      },
      Object {
        "isExported": true,
        "name": "MinValidation",
      },
      Object {
        "isExported": true,
        "name": "MaxValidation",
      },
      Object {
        "isExported": true,
        "name": "NegativeValidation",
      },
      Object {
        "isExported": true,
        "name": "PositiveValidation",
      },
      Object {
        "isExported": true,
        "name": "IntegerValidation",
      },
      Object {
        "isExported": true,
        "name": "FloatValidation",
      },
      Object {
        "isExported": true,
        "name": "LessThanValidation",
      },
      Object {
        "isExported": true,
        "name": "MoreThanValidation",
      },
      Object {
        "isExported": true,
        "name": "TrimValidation",
      },
      Object {
        "isExported": true,
        "name": "LowercaseValidation",
      },
      Object {
        "isExported": true,
        "name": "UppercaseValidation",
      },
      Object {
        "isExported": true,
        "name": "MinLengthValidation",
      },
      Object {
        "isExported": true,
        "name": "MaxLengthValidation",
      },
      Object {
        "isExported": true,
        "name": "EmailValidation",
      },
      Object {
        "isExported": true,
        "name": "UrlValidation",
      },
      Object {
        "isExported": true,
        "name": "MatchValidation",
      },
    ],
    "imports": Array [
      Object {
        "absPath": "../../../validators/model",
        "clauses": Array [
          "CustomValidationFunction",
        ],
      },
      Object {
        "absPath": "../../../codegen/model",
        "clauses": Array [
          "Data",
        ],
      },
      Object {
        "absPath": "../../../localization/model",
        "clauses": Array [
          "Message",
        ],
      },
    ],
    "name": "../../../src/decorators",
  },
  Object {
    "classes": Array [],
    "functions": Array [
      Object {
        "isExported": false,
        "name": "emptyDecorator",
      },
      Object {
        "isExported": true,
        "name": "RequiredOneOfValidation",
      },
      Object {
        "isExported": true,
        "name": "TypeValidation",
      },
      Object {
        "isExported": true,
        "name": "CustomValidation",
      },
      Object {
        "isExported": true,
        "name": "IgnoreValidation",
      },
      Object {
        "isExported": true,
        "name": "EqualValidation",
      },
      Object {
        "isExported": true,
        "name": "EqualToValidation",
      },
      Object {
        "isExported": true,
        "name": "MinValidation",
      },
      Object {
        "isExported": true,
        "name": "MaxValidation",
      },
      Object {
        "isExported": true,
        "name": "NegativeValidation",
      },
      Object {
        "isExported": true,
        "name": "PositiveValidation",
      },
      Object {
        "isExported": true,
        "name": "IntegerValidation",
      },
      Object {
        "isExported": true,
        "name": "FloatValidation",
      },
      Object {
        "isExported": true,
        "name": "LessThanValidation",
      },
      Object {
        "isExported": true,
        "name": "MoreThanValidation",
      },
      Object {
        "isExported": true,
        "name": "TrimValidation",
      },
      Object {
        "isExported": true,
        "name": "LowercaseValidation",
      },
      Object {
        "isExported": true,
        "name": "UppercaseValidation",
      },
      Object {
        "isExported": true,
        "name": "MinLengthValidation",
      },
      Object {
        "isExported": true,
        "name": "MaxLengthValidation",
      },
      Object {
        "isExported": true,
        "name": "EmailValidation",
      },
      Object {
        "isExported": true,
        "name": "UrlValidation",
      },
      Object {
        "isExported": true,
        "name": "MatchValidation",
      },
    ],
    "imports": Array [
      Object {
        "absPath": "../../../src/validators/model",
        "clauses": Array [
          "CustomValidationFunction",
        ],
      },
      Object {
        "absPath": "../../../src/codegen/model",
        "clauses": Array [
          "Data",
        ],
      },
      Object {
        "absPath": "../../../src/localization/model",
        "clauses": Array [
          "Message",
        ],
      },
    ],
    "name": "../../../src/decorators/index",
  },
]
`;
