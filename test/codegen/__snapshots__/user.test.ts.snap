// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`codegen/user create validators: generated validators at "/Users/alex-shul/Desktop/projects/ts-generate-validator/test/mock/user/generated/validators/model.ts" 1`] = `
"import {
  GeneratedValidation,
  GeneratedValidationPayload,
  UserContext,
  initConfig,
  getConfig,
  mergeDeep,
  requiredOneOfValidator,
  typeValidator,
  minLengthValidator,
  maxLengthValidator,
  trimValidator,
  minValidator,
  maxValidator,
  integerValidator,
  lessThanValidator,
  positiveValidator,
  equalValidator,
  emailValidator,
  matchValidator,
  urlValidator,
  lowercaseValidator,
  uppercaseValidator,
  floatValidator
} from 'ts-generate-validator';

import { User } from '../../model';

export const userValidator: GeneratedValidation = (payload: GeneratedValidationPayload<typeof User, UserContext>) => {
  const config = mergeDeep({}, getConfig(), payload.config);

  requiredOneOfValidator({
    property: payload.data.email,
    propertyName: 'email',
    data: payload.data,
    config,

    fields: ['email', 'phone']
  });

  typeValidator({
    property: payload.data.name,
    propertyName: 'name',
    data: payload.data,
    config
  });

  minLengthValidator({
    property: payload.data.name,
    propertyName: 'name',
    data: payload.data,
    config,

    threshold: 2
  });

  maxLengthValidator({
    property: payload.data.name,
    propertyName: 'name',
    data: payload.data,
    config,

    threshold: 50
  });

  trimValidator({
    property: payload.data.name,
    propertyName: 'name',
    data: payload.data,
    config
  });

  typeValidator({
    property: payload.data.surname,
    propertyName: 'surname',
    data: payload.data,
    config
  });

  minLengthValidator({
    property: payload.data.surname,
    propertyName: 'surname',
    data: payload.data,
    config,

    threshold: 2,

    customMessage: 'surname length must be more then 2 letters'
  });

  maxLengthValidator({
    property: payload.data.surname,
    propertyName: 'surname',
    data: payload.data,
    config,

    threshold: 50,

    customMessage: 'surname length must be less then 50 letters'
  });

  trimValidator({
    property: payload.data.surname,
    propertyName: 'surname',
    data: payload.data,
    config,

    customMessage: 'there should be no spaces at the beginning and at the end of surname'
  });

  typeValidator({
    property: payload.data.age,
    propertyName: 'age',
    data: payload.data,
    config
  });

  minValidator({
    property: payload.data.age,
    propertyName: 'age',
    data: payload.data,
    config,

    threshold: 18
  });

  maxValidator({
    property: payload.data.age,
    propertyName: 'age',
    data: payload.data,
    config,

    threshold: 60
  });

  integerValidator({
    property: payload.data.age,
    propertyName: 'age',
    data: payload.data,
    config
  });

  typeValidator({
    property: payload.data.workExperience,
    propertyName: 'workExperience',
    data: payload.data,
    config
  });

  lessThanValidator({
    property: payload.data.workExperience,
    propertyName: 'workExperience',
    data: payload.data,
    config,

    targetPropertyName: 'age'
  });

  positiveValidator({
    property: payload.data.workExperience,
    propertyName: 'workExperience',
    data: payload.data,
    config
  });

  typeValidator({
    property: payload.data.isActive,
    propertyName: 'isActive',
    data: payload.data,
    config
  });

  equalValidator({
    property: payload.data.isActive,
    propertyName: 'isActive',
    data: payload.data,
    config,

    value: true
  });

  typeValidator({
    property: payload.data.email,
    propertyName: 'email',
    data: payload.data,
    config
  });

  emailValidator({
    property: payload.data.email,
    propertyName: 'email',
    data: payload.data,
    config
  });

  typeValidator({
    property: payload.data.phone,
    propertyName: 'phone',
    data: payload.data,
    config
  });

  matchValidator({
    property: payload.data.phone,
    propertyName: 'phone',
    data: payload.data,
    config,

    regexp: /^\\\\d{10}$/
  });

  typeValidator({
    property: payload.data.website,
    propertyName: 'website',
    data: payload.data,
    config
  });

  urlValidator({
    property: payload.data.website,
    propertyName: 'website',
    data: payload.data,
    config
  });

  typeValidator({
    property: payload.data.nickname,
    propertyName: 'nickname',
    data: payload.data,
    config
  });

  lowercaseValidator({
    property: payload.data.nickname,
    propertyName: 'nickname',
    data: payload.data,
    config
  });

  minLengthValidator({
    property: payload.data.nickname,
    propertyName: 'nickname',
    data: payload.data,
    config,

    threshold: 5
  });

  maxLengthValidator({
    property: payload.data.nickname,
    propertyName: 'nickname',
    data: payload.data,
    config,

    threshold: 20
  });

  typeValidator({
    property: payload.data.cardHolderName,
    propertyName: 'cardHolderName',
    data: payload.data,
    config
  });

  uppercaseValidator({
    property: payload.data.cardHolderName,
    propertyName: 'cardHolderName',
    data: payload.data,
    config
  });

  typeValidator({
    property: payload.data.insuranceRatio,
    propertyName: 'insuranceRatio',
    data: payload.data,
    config
  });

  floatValidator({
    property: payload.data.insuranceRatio,
    propertyName: 'insuranceRatio',
    data: payload.data,
    config
  });
};
"
`;

exports[`codegen/user parse & prepare: data for render 1`] = `
Array [
  Object {
    "configFilePath": undefined,
    "fileName": "model",
    "filePath": "/Users/alex-shul/Desktop/projects/ts-generate-validator/test/mock/user/generated/validators",
    "imports": Array [
      Object {
        "clauses": "GeneratedValidation, GeneratedValidationPayload, UserContext, initConfig, getConfig, mergeDeep, requiredOneOfValidator, typeValidator, minLengthValidator, maxLengthValidator, trimValidator, minValidator, maxValidator, integerValidator, lessThanValidator, positiveValidator, equalValidator, emailValidator, matchValidator, urlValidator, lowercaseValidator, uppercaseValidator, floatValidator",
        "path": "ts-generate-validator",
      },
      Object {
        "clauses": "User",
        "path": "../../model",
      },
    ],
    "validationArgs": Object {
      "config": "config",
      "data": "data",
    },
    "validations": Array [
      Object {
        "async": false,
        "items": Array [
          Object {
            "propertyName": "email",
            "validatorName": "requiredOneOfValidator",
            "validatorPayload": Array [
              Object {
                "property": "fields",
                "type": "array",
                "value": "['email', 'phone']",
              },
            ],
          },
          Object {
            "propertyName": "name",
            "validatorName": "typeValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "name",
            "validatorName": "minLengthValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "2",
              },
            ],
          },
          Object {
            "propertyName": "name",
            "validatorName": "maxLengthValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "50",
              },
            ],
          },
          Object {
            "propertyName": "name",
            "validatorName": "trimValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "surname",
            "validatorName": "typeValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "surname",
            "validatorName": "minLengthValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "2",
              },
              Object {
                "property": "customMessage",
                "type": "string",
                "value": "surname length must be more then 2 letters",
              },
            ],
          },
          Object {
            "propertyName": "surname",
            "validatorName": "maxLengthValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "50",
              },
              Object {
                "property": "customMessage",
                "type": "string",
                "value": "surname length must be less then 50 letters",
              },
            ],
          },
          Object {
            "propertyName": "surname",
            "validatorName": "trimValidator",
            "validatorPayload": Array [
              Object {
                "property": "customMessage",
                "type": "string",
                "value": "there should be no spaces at the beginning and at the end of surname",
              },
            ],
          },
          Object {
            "propertyName": "age",
            "validatorName": "typeValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "age",
            "validatorName": "minValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "18",
              },
            ],
          },
          Object {
            "propertyName": "age",
            "validatorName": "maxValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "60",
              },
            ],
          },
          Object {
            "propertyName": "age",
            "validatorName": "integerValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "workExperience",
            "validatorName": "typeValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "workExperience",
            "validatorName": "lessThanValidator",
            "validatorPayload": Array [
              Object {
                "property": "targetPropertyName",
                "type": "string",
                "value": "age",
              },
            ],
          },
          Object {
            "propertyName": "workExperience",
            "validatorName": "positiveValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "isActive",
            "validatorName": "typeValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "isActive",
            "validatorName": "equalValidator",
            "validatorPayload": Array [
              Object {
                "property": "value",
                "type": "boolean",
                "value": "true",
              },
            ],
          },
          Object {
            "propertyName": "email",
            "validatorName": "typeValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "email",
            "validatorName": "emailValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "phone",
            "validatorName": "typeValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "phone",
            "validatorName": "matchValidator",
            "validatorPayload": Array [
              Object {
                "property": "regexp",
                "type": "",
                "value": "/^\\\\d{10}$/",
              },
            ],
          },
          Object {
            "propertyName": "website",
            "validatorName": "typeValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "website",
            "validatorName": "urlValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "nickname",
            "validatorName": "typeValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "nickname",
            "validatorName": "lowercaseValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "nickname",
            "validatorName": "minLengthValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "5",
              },
            ],
          },
          Object {
            "propertyName": "nickname",
            "validatorName": "maxLengthValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "20",
              },
            ],
          },
          Object {
            "propertyName": "cardHolderName",
            "validatorName": "typeValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "cardHolderName",
            "validatorName": "uppercaseValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "insuranceRatio",
            "validatorName": "typeValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "insuranceRatio",
            "validatorName": "floatValidator",
            "validatorPayload": Array [],
          },
        ],
        "modelClassName": "User",
        "name": "userValidator",
      },
    ],
  },
]
`;

exports[`codegen/user parse & prepare: parsed metadata 1`] = `
Array [
  Object {
    "classes": Array [
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
          Object {
            "arguments": Array [
              Array [
                "email",
                "phone",
              ],
            ],
            "name": "RequiredOneOfValidation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  2,
                ],
                "name": "MinLengthValidation",
              },
              Object {
                "arguments": Array [
                  50,
                ],
                "name": "MaxLengthValidation",
              },
              Object {
                "arguments": Array [],
                "name": "TrimValidation",
              },
            ],
            "name": "name",
            "optional": false,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  2,
                  "surname length must be more then 2 letters",
                ],
                "name": "MinLengthValidation",
              },
              Object {
                "arguments": Array [
                  50,
                  "surname length must be less then 50 letters",
                ],
                "name": "MaxLengthValidation",
              },
              Object {
                "arguments": Array [
                  "there should be no spaces at the beginning and at the end of surname",
                ],
                "name": "TrimValidation",
              },
            ],
            "name": "surname",
            "optional": false,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  18,
                ],
                "name": "MinValidation",
              },
              Object {
                "arguments": Array [
                  60,
                ],
                "name": "MaxValidation",
              },
              Object {
                "arguments": Array [],
                "name": "IntegerValidation",
              },
            ],
            "name": "age",
            "optional": false,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  "age",
                ],
                "name": "LessThanValidation",
              },
              Object {
                "arguments": Array [],
                "name": "PositiveValidation",
              },
            ],
            "name": "workExperience",
            "optional": false,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  true,
                ],
                "name": "EqualValidation",
              },
            ],
            "name": "isActive",
            "optional": false,
            "type": Object {
              "name": "boolean",
              "validationType": "boolean",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [],
                "name": "EmailValidation",
              },
            ],
            "name": "email",
            "optional": true,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  "/^\\\\d{10}$/",
                ],
                "name": "MatchValidation",
              },
            ],
            "name": "phone",
            "optional": true,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [],
                "name": "UrlValidation",
              },
            ],
            "name": "website",
            "optional": true,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [],
                "name": "LowercaseValidation",
              },
              Object {
                "arguments": Array [
                  5,
                ],
                "name": "MinLengthValidation",
              },
              Object {
                "arguments": Array [
                  20,
                ],
                "name": "MaxLengthValidation",
              },
            ],
            "name": "nickname",
            "optional": false,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [],
                "name": "UppercaseValidation",
              },
            ],
            "name": "cardHolderName",
            "optional": false,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [],
                "name": "FloatValidation",
              },
            ],
            "name": "insuranceRatio",
            "optional": false,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
          Object {
            "decorators": Array [],
            "name": "userType",
            "optional": true,
            "type": Object {
              "name": "UserType",
              "referencePath": "/Users/alex-shul/Desktop/projects/ts-generate-validator/test/mock/user/model",
              "validationType": "notSupported",
            },
          },
        ],
        "name": "User",
      },
    ],
    "name": "/Users/alex-shul/Desktop/projects/ts-generate-validator/test/mock/user/model",
  },
]
`;
