// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`codegen/user create validators: generated validators at "generated/validators/model.ts" 1`] = `
"/* This file was automatically generated and should not be edited */
// tslint:disable
/* eslint-disable */

import {
  GeneratedValidation,
  ValidationConfig,
  ValidationError,
  ValidationException,
  Data,
  UserContext,
  getConfig,
  mergeDeep,
  requiredOneOfValidator,
  typeValidator,
  minLengthValidator,
  maxLengthValidator,
  trimValidator,
  minValidator,
  maxValidator,
  integerValidator,
  lessThanValidator,
  positiveValidator,
  equalValidator,
  emailValidator,
  matchValidator,
  urlValidator,
  lowercaseValidator,
  uppercaseValidator,
  floatValidator
} from 'ts-generate-validator';

import { User } from './../../model';

export const userValidator: GeneratedValidation = <D extends Data = typeof User, C extends UserContext = UserContext>(
  data: D,
  configArg?: ValidationConfig,
  context?: C
) => {
  const config = <ValidationConfig>mergeDeep({}, getConfig(), configArg ?? {});
  const errors: ValidationError[] = [];

  try {
    requiredOneOfValidator({
      property: data?.email,
      propertyName: 'email',
      data,
      config,
      context,

      fields: ['email', 'phone']
    });

    typeValidator({
      property: data?.name,
      propertyName: 'name',
      data,
      config,
      context,

      type: 'string'
    });

    minLengthValidator({
      property: data?.name,
      propertyName: 'name',
      data,
      config,
      context,

      threshold: 2
    });

    maxLengthValidator({
      property: data?.name,
      propertyName: 'name',
      data,
      config,
      context,

      threshold: 50
    });

    trimValidator({
      property: data?.name,
      propertyName: 'name',
      data,
      config,
      context
    });

    typeValidator({
      property: data?.surname,
      propertyName: 'surname',
      data,
      config,
      context,

      type: 'string'
    });

    minLengthValidator({
      property: data?.surname,
      propertyName: 'surname',
      data,
      config,
      context,

      threshold: 2,

      customMessage: 'surname length must be more then 2 letters'
    });

    maxLengthValidator({
      property: data?.surname,
      propertyName: 'surname',
      data,
      config,
      context,

      threshold: 50,

      customMessage: 'surname length must be less then 50 letters'
    });

    trimValidator({
      property: data?.surname,
      propertyName: 'surname',
      data,
      config,
      context,

      customMessage: 'there should be no spaces at the beginning and at the end of surname'
    });

    typeValidator({
      property: data?.age,
      propertyName: 'age',
      data,
      config,
      context,

      type: 'number'
    });

    minValidator({
      property: data?.age,
      propertyName: 'age',
      data,
      config,
      context,

      threshold: 18
    });

    maxValidator({
      property: data?.age,
      propertyName: 'age',
      data,
      config,
      context,

      threshold: 60
    });

    integerValidator({
      property: data?.age,
      propertyName: 'age',
      data,
      config,
      context
    });

    typeValidator({
      property: data?.workExperience,
      propertyName: 'workExperience',
      data,
      config,
      context,

      type: 'number'
    });

    lessThanValidator({
      property: data?.workExperience,
      propertyName: 'workExperience',
      data,
      config,
      context,

      targetPropertyName: 'age'
    });

    positiveValidator({
      property: data?.workExperience,
      propertyName: 'workExperience',
      data,
      config,
      context
    });

    typeValidator({
      property: data?.isActive,
      propertyName: 'isActive',
      data,
      config,
      context,

      type: 'boolean'
    });

    equalValidator({
      property: data?.isActive,
      propertyName: 'isActive',
      data,
      config,
      context,

      value: true
    });

    typeValidator({
      property: data?.email,
      propertyName: 'email',
      data,
      config,
      context,

      type: 'string'
    });

    emailValidator({
      property: data?.email,
      propertyName: 'email',
      data,
      config,
      context
    });

    typeValidator({
      property: data?.phone,
      propertyName: 'phone',
      data,
      config,
      context,

      type: 'string'
    });

    matchValidator({
      property: data?.phone,
      propertyName: 'phone',
      data,
      config,
      context,

      regexp: /^\\\\d{10}$/
    });

    typeValidator({
      property: data?.website,
      propertyName: 'website',
      data,
      config,
      context,

      type: 'string'
    });

    urlValidator({
      property: data?.website,
      propertyName: 'website',
      data,
      config,
      context
    });

    typeValidator({
      property: data?.nickname,
      propertyName: 'nickname',
      data,
      config,
      context,

      type: 'string'
    });

    lowercaseValidator({
      property: data?.nickname,
      propertyName: 'nickname',
      data,
      config,
      context
    });

    minLengthValidator({
      property: data?.nickname,
      propertyName: 'nickname',
      data,
      config,
      context,

      threshold: 5
    });

    maxLengthValidator({
      property: data?.nickname,
      propertyName: 'nickname',
      data,
      config,
      context,

      threshold: 20
    });

    typeValidator({
      property: data?.cardHolderName,
      propertyName: 'cardHolderName',
      data,
      config,
      context,

      type: 'string'
    });

    uppercaseValidator({
      property: data?.cardHolderName,
      propertyName: 'cardHolderName',
      data,
      config,
      context
    });

    typeValidator({
      property: data?.insuranceRatio,
      propertyName: 'insuranceRatio',
      data,
      config,
      context,

      type: 'number'
    });

    floatValidator({
      property: data?.insuranceRatio,
      propertyName: 'insuranceRatio',
      data,
      config,
      context
    });
  } catch (err) {
    if (!(err instanceof ValidationError)) {
      throw err;
    }

    errors.push(err);

    if (config.stopAtFirstError) {
      throw new ValidationException(errors);
    }
  }

  if (errors.length) {
    throw new ValidationException(errors);
  }
};
"
`;

exports[`codegen/user parse & prepare: data for render 1`] = `
Array [
  Object {
    "fileName": "model.ts",
    "filePath": "generated/validators",
    "imports": Array [
      Object {
        "clauses": "GeneratedValidation, ValidationConfig, ValidationError, ValidationException, Data, UserContext, getConfig, mergeDeep, requiredOneOfValidator, typeValidator, minLengthValidator, maxLengthValidator, trimValidator, minValidator, maxValidator, integerValidator, lessThanValidator, positiveValidator, equalValidator, emailValidator, matchValidator, urlValidator, lowercaseValidator, uppercaseValidator, floatValidator",
        "path": "ts-generate-validator",
      },
      Object {
        "clauses": "User",
        "path": "./../../model",
      },
    ],
    "validations": Array [
      Object {
        "async": false,
        "items": Array [
          Object {
            "propertyName": "email",
            "validatorName": "requiredOneOfValidator",
            "validatorPayload": Array [
              Object {
                "property": "fields",
                "type": "array",
                "value": "['email', 'phone']",
              },
            ],
          },
          Object {
            "propertyName": "name",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "string",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "name",
            "validatorName": "minLengthValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "2",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "name",
            "validatorName": "maxLengthValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "50",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "name",
            "validatorName": "trimValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "surname",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "string",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "surname",
            "validatorName": "minLengthValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "2",
              },
              Object {
                "property": "customMessage",
                "type": "string",
                "value": "surname length must be more then 2 letters",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "surname",
            "validatorName": "maxLengthValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "50",
              },
              Object {
                "property": "customMessage",
                "type": "string",
                "value": "surname length must be less then 50 letters",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "surname",
            "validatorName": "trimValidator",
            "validatorPayload": Array [
              Object {
                "property": "customMessage",
                "type": "string",
                "value": "there should be no spaces at the beginning and at the end of surname",
              },
            ],
          },
          Object {
            "propertyName": "age",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "number",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "age",
            "validatorName": "minValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "18",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "age",
            "validatorName": "maxValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "60",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "age",
            "validatorName": "integerValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "workExperience",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "number",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "workExperience",
            "validatorName": "lessThanValidator",
            "validatorPayload": Array [
              Object {
                "property": "targetPropertyName",
                "type": "string",
                "value": "age",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "workExperience",
            "validatorName": "positiveValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "isActive",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "boolean",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "isActive",
            "validatorName": "equalValidator",
            "validatorPayload": Array [
              Object {
                "property": "value",
                "type": "boolean",
                "value": "true",
              },
            ],
          },
          Object {
            "propertyName": "email",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "string",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "email",
            "validatorName": "emailValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "phone",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "string",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "phone",
            "validatorName": "matchValidator",
            "validatorPayload": Array [
              Object {
                "property": "regexp",
                "type": "",
                "value": "/^\\\\d{10}$/",
              },
            ],
          },
          Object {
            "propertyName": "website",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "string",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "website",
            "validatorName": "urlValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "nickname",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "string",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "nickname",
            "validatorName": "lowercaseValidator",
            "validatorPayload": Array [],
          },
          Object {
            "async": false,
            "propertyName": "nickname",
            "validatorName": "minLengthValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "5",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "nickname",
            "validatorName": "maxLengthValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "20",
              },
            ],
          },
          Object {
            "propertyName": "cardHolderName",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "string",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "cardHolderName",
            "validatorName": "uppercaseValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "insuranceRatio",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "number",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "insuranceRatio",
            "validatorName": "floatValidator",
            "validatorPayload": Array [],
          },
        ],
        "modelClassName": "User",
        "name": "userValidator",
      },
    ],
  },
]
`;

exports[`codegen/user parse & prepare: parsed metadata 1`] = `
Array [
  Object {
    "classes": Array [
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
          Object {
            "arguments": Array [
              Array [
                "email",
                "phone",
              ],
            ],
            "name": "RequiredOneOfValidation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  2,
                ],
                "name": "MinLengthValidation",
              },
              Object {
                "arguments": Array [
                  50,
                ],
                "name": "MaxLengthValidation",
              },
              Object {
                "arguments": Array [],
                "name": "TrimValidation",
              },
            ],
            "name": "name",
            "optional": false,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  2,
                  "surname length must be more then 2 letters",
                ],
                "name": "MinLengthValidation",
              },
              Object {
                "arguments": Array [
                  50,
                  "surname length must be less then 50 letters",
                ],
                "name": "MaxLengthValidation",
              },
              Object {
                "arguments": Array [
                  "there should be no spaces at the beginning and at the end of surname",
                ],
                "name": "TrimValidation",
              },
            ],
            "name": "surname",
            "optional": false,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  18,
                ],
                "name": "MinValidation",
              },
              Object {
                "arguments": Array [
                  60,
                ],
                "name": "MaxValidation",
              },
              Object {
                "arguments": Array [],
                "name": "IntegerValidation",
              },
            ],
            "name": "age",
            "optional": false,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  "age",
                ],
                "name": "LessThanValidation",
              },
              Object {
                "arguments": Array [],
                "name": "PositiveValidation",
              },
            ],
            "name": "workExperience",
            "optional": false,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  true,
                ],
                "name": "EqualValidation",
              },
            ],
            "name": "isActive",
            "optional": false,
            "type": Object {
              "name": "boolean",
              "validationType": "boolean",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [],
                "name": "EmailValidation",
              },
            ],
            "name": "email",
            "optional": true,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  "/^\\\\d{10}$/",
                ],
                "name": "MatchValidation",
              },
            ],
            "name": "phone",
            "optional": true,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [],
                "name": "UrlValidation",
              },
            ],
            "name": "website",
            "optional": true,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [],
                "name": "LowercaseValidation",
              },
              Object {
                "arguments": Array [
                  5,
                ],
                "name": "MinLengthValidation",
              },
              Object {
                "arguments": Array [
                  20,
                ],
                "name": "MaxLengthValidation",
              },
            ],
            "name": "nickname",
            "optional": false,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [],
                "name": "UppercaseValidation",
              },
            ],
            "name": "cardHolderName",
            "optional": false,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [],
                "name": "FloatValidation",
              },
            ],
            "name": "insuranceRatio",
            "optional": false,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
          Object {
            "decorators": Array [],
            "name": "userType",
            "optional": true,
            "type": Object {
              "name": "UserType",
              "referencePath": "type/model",
              "validationType": "notSupported",
            },
          },
        ],
        "name": "User",
      },
    ],
    "name": "model.ts",
  },
]
`;
