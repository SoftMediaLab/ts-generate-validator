// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`codegen/raw/common parse & prepare: data for render 1`] = `
Array [
  Object {
    "fileName": ".Users.alex-shul.Desktop.projects.ts-generate-validator.test.mock.raw.common.model",
    "filePath": "/Users/alex-shul/Desktop/projects/ts-generate-validator/test/mock/raw/common/generated/validators",
    "imports": Array [
      Object {
        "clauses": Array [
          "GeneratedValidation",
          "typeValidator",
          "customValidator",
          "equalValidator",
          "equalToValidator",
        ],
        "path": "ts-generate-validator",
      },
      Object {
        "clauses": Array [
          "TypeValidatorWithCustomMessage",
          "TypeValidatorOnWrongPropertyType",
          "CustomValidatorFailed",
          "CutomValidatorSuccess",
          "CutomValidatorSuccessAsync",
          "IgnoreValidationForNonPrimitiveProperty",
          "IgnoreValidationForPrimitiveProperty",
          "IgnoreValidationForPrimitivePropertyWithOtherDecorators",
          "EqualValidatorWithDefaultMessage",
          "EqualValidatorWithCustomMessage",
          "EqualValidatorForBoolean",
          "EqualToValidatorWithDefaultMessage",
        ],
        "path": "../../model",
      },
    ],
    "validationArgs": Array [
      "data",
      "config",
    ],
    "validations": Array [
      Object {
        "async": false,
        "items": Array [
          Object {
            "propertyName": "someProperty",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "customMessage",
                "value": "type custom message",
              },
            ],
          },
        ],
        "name": "typeValidatorWithCustomMessageValidator",
      },
      Object {
        "async": false,
        "items": Array [],
        "name": "typeValidatorOnWrongPropertyTypeValidator",
      },
      Object {
        "async": false,
        "items": Array [
          Object {
            "propertyName": "someProperty",
            "validatorName": "typeValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "someProperty",
            "validatorName": "customValidator",
            "validatorPayload": Array [
              Object {
                "property": "customValidationFunction",
                "value": "() => {
    throw new Error('Failed!');
  }",
              },
            ],
          },
        ],
        "name": "customValidatorFailedValidator",
      },
      Object {
        "async": false,
        "items": Array [
          Object {
            "propertyName": "someProperty",
            "validatorName": "typeValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "someProperty",
            "validatorName": "customValidator",
            "validatorPayload": Array [
              Object {
                "property": "customValidationFunction",
                "value": "() => undefined",
              },
            ],
          },
        ],
        "name": "cutomValidatorSuccessValidator",
      },
      Object {
        "async": true,
        "items": Array [
          Object {
            "propertyName": "someProperty",
            "validatorName": "typeValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "someProperty",
            "validatorName": "customValidator",
            "validatorPayload": Array [
              Object {
                "property": "customValidationFunction",
                "value": "async () => new Promise((resolve) => setTimeout(() => resolve(), 300))",
              },
            ],
          },
        ],
        "name": "cutomValidatorSuccessAsyncValidator",
      },
      Object {
        "async": false,
        "items": Array [],
        "name": "ignoreValidationForNonPrimitivePropertyValidator",
      },
      Object {
        "async": false,
        "items": Array [],
        "name": "ignoreValidationForPrimitivePropertyValidator",
      },
      Object {
        "async": false,
        "items": Array [],
        "name": "ignoreValidationForPrimitivePropertyWithOtherDecoratorsValidator",
      },
      Object {
        "async": false,
        "items": Array [
          Object {
            "propertyName": "someProperty",
            "validatorName": "typeValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "someProperty",
            "validatorName": "equalValidator",
            "validatorPayload": Array [
              Object {
                "property": "value",
                "value": "abcdef",
              },
            ],
          },
        ],
        "name": "equalValidatorWithDefaultMessageValidator",
      },
      Object {
        "async": false,
        "items": Array [
          Object {
            "propertyName": "someProperty",
            "validatorName": "typeValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "someProperty",
            "validatorName": "equalValidator",
            "validatorPayload": Array [
              Object {
                "property": "value",
                "value": "245",
              },
              Object {
                "property": "customMessage",
                "value": "equal custom message",
              },
            ],
          },
        ],
        "name": "equalValidatorWithCustomMessageValidator",
      },
      Object {
        "async": false,
        "items": Array [
          Object {
            "propertyName": "someProperty",
            "validatorName": "typeValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "someProperty",
            "validatorName": "equalValidator",
            "validatorPayload": Array [
              Object {
                "property": "value",
                "value": "true",
              },
            ],
          },
        ],
        "name": "equalValidatorForBooleanValidator",
      },
      Object {
        "async": false,
        "items": Array [
          Object {
            "propertyName": "someProperty",
            "validatorName": "typeValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "someProperty",
            "validatorName": "equalToValidator",
            "validatorPayload": Array [
              Object {
                "property": "targetPropertyName",
                "value": "someOtherProperty",
              },
            ],
          },
          Object {
            "propertyName": "someOtherProperty",
            "validatorName": "typeValidator",
            "validatorPayload": Array [],
          },
          Object {
            "propertyName": "someOtherProperty",
            "validatorName": "equalToValidator",
            "validatorPayload": Array [
              Object {
                "property": "targetPropertyName",
                "value": "someProperty",
              },
            ],
          },
        ],
        "name": "equalToValidatorWithDefaultMessageValidator",
      },
    ],
  },
]
`;

exports[`codegen/raw/common parse & prepare: parsed metadata 1`] = `
Array [
  Object {
    "classes": Array [
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  "type custom message",
                ],
                "name": "TypeValidation",
              },
            ],
            "name": "someProperty",
            "optional": false,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
        ],
        "name": "TypeValidatorWithCustomMessage",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  "type custom message",
                ],
                "name": "TypeValidation",
              },
            ],
            "name": "someProperty",
            "optional": true,
            "type": Object {
              "name": "CustomValidatorFailed",
              "referencePath": "/Users/alex-shul/Desktop/projects/ts-generate-validator/test/mock/raw/common/model",
              "validationType": "notSupported",
            },
          },
        ],
        "name": "TypeValidatorOnWrongPropertyType",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  "() => {
    throw new Error('Failed!');
  }",
                ],
                "name": "CustomValidation",
              },
            ],
            "name": "someProperty",
            "optional": true,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
        ],
        "name": "CustomValidatorFailed",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  "() => undefined",
                ],
                "name": "CustomValidation",
              },
            ],
            "name": "someProperty",
            "optional": true,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
        ],
        "name": "CutomValidatorSuccess",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  "async () => new Promise((resolve) => setTimeout(() => resolve(), 300))",
                ],
                "name": "CustomValidation",
              },
            ],
            "name": "someProperty",
            "optional": true,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
        ],
        "name": "CutomValidatorSuccessAsync",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [],
                "name": "IgnoreValidation",
              },
            ],
            "name": "someProperty",
            "optional": true,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
        ],
        "name": "IgnoreValidationForNonPrimitiveProperty",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [],
                "name": "IgnoreValidation",
              },
            ],
            "name": "someProperty",
            "optional": false,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
        ],
        "name": "IgnoreValidationForPrimitiveProperty",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  10,
                ],
                "name": "MaxValidation",
              },
              Object {
                "arguments": Array [],
                "name": "IgnoreValidation",
              },
              Object {
                "arguments": Array [
                  2,
                ],
                "name": "MinValidation",
              },
            ],
            "name": "someProperty",
            "optional": false,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
        ],
        "name": "IgnoreValidationForPrimitivePropertyWithOtherDecorators",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  "abcdef",
                ],
                "name": "EqualValidation",
              },
            ],
            "name": "someProperty",
            "optional": false,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
        ],
        "name": "EqualValidatorWithDefaultMessage",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  245,
                  "equal custom message",
                ],
                "name": "EqualValidation",
              },
            ],
            "name": "someProperty",
            "optional": false,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
        ],
        "name": "EqualValidatorWithCustomMessage",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  true,
                ],
                "name": "EqualValidation",
              },
            ],
            "name": "someProperty",
            "optional": false,
            "type": Object {
              "name": "boolean",
              "validationType": "boolean",
            },
          },
        ],
        "name": "EqualValidatorForBoolean",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  "someOtherProperty",
                ],
                "name": "EqualToValidation",
              },
            ],
            "name": "someProperty",
            "optional": false,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  "someProperty",
                ],
                "name": "EqualToValidation",
              },
            ],
            "name": "someOtherProperty",
            "optional": false,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
        ],
        "name": "EqualToValidatorWithDefaultMessage",
      },
    ],
    "name": "/Users/alex-shul/Desktop/projects/ts-generate-validator/test/mock/raw/common/model",
  },
]
`;
