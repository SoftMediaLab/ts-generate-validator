// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`codegen/raw/common create validators: generated validators at "src/generated/validators/model.ts" 1`] = `
"/* This file was automatically generated and should not be edited */
// tslint:disable
/* eslint-disable */

import {
  GeneratedValidation,
  ValidationConfig,
  ValidationError,
  ValidationException,
  Data,
  UserContext,
  getConfig,
  mergeDeep,
  typeValidator,
  customValidator,
  equalValidator,
  equalToValidator
} from 'ts-generate-validator';

import {
  TypeValidatorWithCustomMessage,
  TypeValidatorOnNestedPropertyType,
  TypeValidatorOnNullPropertyType,
  TypeValidatorOnImportedEnumPropertyType,
  CustomValidatorFailed,
  CutomValidatorSuccess,
  CutomValidatorOnNonPrimitiveStructure,
  CutomValidatorSuccessAsync,
  CutomValidatorImported,
  customValidationFuncExported,
  CutomValidatorExported,
  CutomValidatorWhichUsesImportedEntity,
  IgnoreValidationForNonPrimitiveProperty,
  IgnoreValidationForPrimitiveProperty,
  IgnoreValidationForPrimitivePropertyWithOtherDecorators,
  EqualValidatorWithDefaultMessage,
  EqualValidatorWithCustomMessage,
  EqualValidatorForBoolean,
  EqualToValidatorWithDefaultMessage
} from './../../../model';

import { UserType } from './../../../../../user/type/model';

import { customValidationFuncImported, someEntityUsedInCustomValidator } from './../../../customValidationFunc';

import { ValidationError } from './../../../../../../../src';

export const typeValidatorWithCustomMessageValidator: GeneratedValidation = <
  D extends Data = typeof TypeValidatorWithCustomMessage,
  C extends UserContext = UserContext
>(
  data: D,
  configArg?: ValidationConfig,
  context?: C
) => {
  const config = <ValidationConfig>mergeDeep({}, getConfig(), configArg ?? {});
  const errors: ValidationError[] = [];

  try {
    typeValidator({
      property: data?.someProperty,
      propertyName: 'someProperty',
      data,
      config,
      context,

      customMessage: 'type custom message',

      type: 'string'
    });
  } catch (err) {
    if (!(err instanceof ValidationError)) {
      throw err;
    }

    errors.push(err);

    if (config.stopAtFirstError) {
      throw new ValidationException(errors);
    }
  }

  if (errors.length) {
    throw new ValidationException(errors);
  }
};

export const typeValidatorOnNestedPropertyTypeValidator: GeneratedValidation = <
  D extends Data = typeof TypeValidatorOnNestedPropertyType,
  C extends UserContext = UserContext
>(
  data: D,
  configArg?: ValidationConfig,
  context?: C
) => {
  const config = <ValidationConfig>mergeDeep({}, getConfig(), configArg ?? {});
  const errors: ValidationError[] = [];

  try {
    typeValidator({
      property: data?.someProperty,
      propertyName: 'someProperty',
      data,
      config,
      context,

      customMessage: 'type custom message',

      typeDescription: customValidatorFailedValidator,

      type: 'nested'
    });
  } catch (err) {
    if (!(err instanceof ValidationError)) {
      throw err;
    }

    errors.push(err);

    if (config.stopAtFirstError) {
      throw new ValidationException(errors);
    }
  }

  if (errors.length) {
    throw new ValidationException(errors);
  }
};

export const typeValidatorOnNullPropertyTypeValidator: GeneratedValidation = <
  D extends Data = typeof TypeValidatorOnNullPropertyType,
  C extends UserContext = UserContext
>(
  data: D,
  configArg?: ValidationConfig,
  context?: C
) => {
  const config = <ValidationConfig>mergeDeep({}, getConfig(), configArg ?? {});
  const errors: ValidationError[] = [];

  try {
    typeValidator({
      property: data?.someProperty,
      propertyName: 'someProperty',
      data,
      config,
      context,

      type: 'null'
    });
  } catch (err) {
    if (!(err instanceof ValidationError)) {
      throw err;
    }

    errors.push(err);

    if (config.stopAtFirstError) {
      throw new ValidationException(errors);
    }
  }

  if (errors.length) {
    throw new ValidationException(errors);
  }
};

export const typeValidatorOnImportedEnumPropertyTypeValidator: GeneratedValidation = <
  D extends Data = typeof TypeValidatorOnImportedEnumPropertyType,
  C extends UserContext = UserContext
>(
  data: D,
  configArg?: ValidationConfig,
  context?: C
) => {
  const config = <ValidationConfig>mergeDeep({}, getConfig(), configArg ?? {});
  const errors: ValidationError[] = [];

  try {
    typeValidator({
      property: data?.someProperty,
      propertyName: 'someProperty',
      data,
      config,
      context,

      typeDescription: UserType,

      type: 'enum'
    });
  } catch (err) {
    if (!(err instanceof ValidationError)) {
      throw err;
    }

    errors.push(err);

    if (config.stopAtFirstError) {
      throw new ValidationException(errors);
    }
  }

  if (errors.length) {
    throw new ValidationException(errors);
  }
};

export const customValidatorFailedValidator: GeneratedValidation = <
  D extends Data = typeof CustomValidatorFailed,
  C extends UserContext = UserContext
>(
  data: D,
  configArg?: ValidationConfig,
  context?: C
) => {
  const config = <ValidationConfig>mergeDeep({}, getConfig(), configArg ?? {});
  const errors: ValidationError[] = [];

  try {
    typeValidator({
      property: data?.someProperty,
      propertyName: 'someProperty',
      data,
      config,
      context,

      type: 'number'
    });

    customValidator({
      property: data?.someProperty,
      propertyName: 'someProperty',
      data,
      config,
      context,

      customValidationFunction: () => {
        throw new Error('Failed!');
      }
    });
  } catch (err) {
    if (!(err instanceof ValidationError)) {
      throw err;
    }

    errors.push(err);

    if (config.stopAtFirstError) {
      throw new ValidationException(errors);
    }
  }

  if (errors.length) {
    throw new ValidationException(errors);
  }
};

export const cutomValidatorSuccessValidator: GeneratedValidation = <
  D extends Data = typeof CutomValidatorSuccess,
  C extends UserContext = UserContext
>(
  data: D,
  configArg?: ValidationConfig,
  context?: C
) => {
  const config = <ValidationConfig>mergeDeep({}, getConfig(), configArg ?? {});
  const errors: ValidationError[] = [];

  try {
    typeValidator({
      property: data?.someProperty,
      propertyName: 'someProperty',
      data,
      config,
      context,

      type: 'number'
    });

    customValidator({
      property: data?.someProperty,
      propertyName: 'someProperty',
      data,
      config,
      context,

      customValidationFunction: () => undefined
    });
  } catch (err) {
    if (!(err instanceof ValidationError)) {
      throw err;
    }

    errors.push(err);

    if (config.stopAtFirstError) {
      throw new ValidationException(errors);
    }
  }

  if (errors.length) {
    throw new ValidationException(errors);
  }
};

export const cutomValidatorOnNonPrimitiveStructureValidator: GeneratedValidation = <
  D extends Data = typeof CutomValidatorOnNonPrimitiveStructure,
  C extends UserContext = UserContext
>(
  data: D,
  configArg?: ValidationConfig,
  context?: C
) => {
  const config = <ValidationConfig>mergeDeep({}, getConfig(), configArg ?? {});
  const errors: ValidationError[] = [];

  try {
    customValidator({
      property: data?.someProperty,
      propertyName: 'someProperty',
      data,
      config,
      context,

      customValidationFunction: () => undefined
    });
  } catch (err) {
    if (!(err instanceof ValidationError)) {
      throw err;
    }

    errors.push(err);

    if (config.stopAtFirstError) {
      throw new ValidationException(errors);
    }
  }

  if (errors.length) {
    throw new ValidationException(errors);
  }
};

export const cutomValidatorSuccessAsyncValidator: GeneratedValidation = async <
  D extends Data = typeof CutomValidatorSuccessAsync,
  C extends UserContext = UserContext
>(
  data: D,
  configArg?: ValidationConfig,
  context?: C
) => {
  const config = <ValidationConfig>mergeDeep({}, getConfig(), configArg ?? {});
  const errors: ValidationError[] = [];

  try {
    typeValidator({
      property: data?.someProperty,
      propertyName: 'someProperty',
      data,
      config,
      context,

      type: 'number'
    });

    await customValidator({
      property: data?.someProperty,
      propertyName: 'someProperty',
      data,
      config,
      context,

      customValidationFunction: async (): Promise<void> => new Promise((resolve) => setTimeout(() => resolve(), 300))
    });
  } catch (err) {
    if (!(err instanceof ValidationError)) {
      throw err;
    }

    errors.push(err);

    if (config.stopAtFirstError) {
      throw new ValidationException(errors);
    }
  }

  if (errors.length) {
    throw new ValidationException(errors);
  }
};

export const cutomValidatorImportedValidator: GeneratedValidation = <
  D extends Data = typeof CutomValidatorImported,
  C extends UserContext = UserContext
>(
  data: D,
  configArg?: ValidationConfig,
  context?: C
) => {
  const config = <ValidationConfig>mergeDeep({}, getConfig(), configArg ?? {});
  const errors: ValidationError[] = [];

  try {
    typeValidator({
      property: data?.someProperty,
      propertyName: 'someProperty',
      data,
      config,
      context,

      type: 'number'
    });

    customValidator({
      property: data?.someProperty,
      propertyName: 'someProperty',
      data,
      config,
      context,

      customValidationFunction: customValidationFuncImported
    });
  } catch (err) {
    if (!(err instanceof ValidationError)) {
      throw err;
    }

    errors.push(err);

    if (config.stopAtFirstError) {
      throw new ValidationException(errors);
    }
  }

  if (errors.length) {
    throw new ValidationException(errors);
  }
};

export const cutomValidatorExportedValidator: GeneratedValidation = <
  D extends Data = typeof CutomValidatorExported,
  C extends UserContext = UserContext
>(
  data: D,
  configArg?: ValidationConfig,
  context?: C
) => {
  const config = <ValidationConfig>mergeDeep({}, getConfig(), configArg ?? {});
  const errors: ValidationError[] = [];

  try {
    typeValidator({
      property: data?.someProperty,
      propertyName: 'someProperty',
      data,
      config,
      context,

      type: 'number'
    });

    customValidator({
      property: data?.someProperty,
      propertyName: 'someProperty',
      data,
      config,
      context,

      customValidationFunction: customValidationFuncExported
    });
  } catch (err) {
    if (!(err instanceof ValidationError)) {
      throw err;
    }

    errors.push(err);

    if (config.stopAtFirstError) {
      throw new ValidationException(errors);
    }
  }

  if (errors.length) {
    throw new ValidationException(errors);
  }
};

export const cutomValidatorWhichUsesImportedEntityValidator: GeneratedValidation = <
  D extends Data = typeof CutomValidatorWhichUsesImportedEntity,
  C extends UserContext = UserContext
>(
  data: D,
  configArg?: ValidationConfig,
  context?: C
) => {
  const config = <ValidationConfig>mergeDeep({}, getConfig(), configArg ?? {});
  const errors: ValidationError[] = [];

  try {
    typeValidator({
      property: data?.someProperty,
      propertyName: 'someProperty',
      data,
      config,
      context,

      type: 'number'
    });

    customValidator({
      property: data?.someProperty,
      propertyName: 'someProperty',
      data,
      config,
      context,

      customValidationFunction: ({ property, propertyName }) => {
        if (property !== someEntityUsedInCustomValidator) {
          throw new ValidationError(propertyName as string, 'some error message');
        }
      }
    });
  } catch (err) {
    if (!(err instanceof ValidationError)) {
      throw err;
    }

    errors.push(err);

    if (config.stopAtFirstError) {
      throw new ValidationException(errors);
    }
  }

  if (errors.length) {
    throw new ValidationException(errors);
  }
};

export const ignoreValidationForNonPrimitivePropertyValidator: GeneratedValidation = <
  D extends Data = typeof IgnoreValidationForNonPrimitiveProperty,
  C extends UserContext = UserContext
>(
  data: D,
  configArg?: ValidationConfig,
  context?: C
) => {
  const config = <ValidationConfig>mergeDeep({}, getConfig(), configArg ?? {});
  const errors: ValidationError[] = [];

  try {
  } catch (err) {
    if (!(err instanceof ValidationError)) {
      throw err;
    }

    errors.push(err);

    if (config.stopAtFirstError) {
      throw new ValidationException(errors);
    }
  }

  if (errors.length) {
    throw new ValidationException(errors);
  }
};

export const ignoreValidationForPrimitivePropertyValidator: GeneratedValidation = <
  D extends Data = typeof IgnoreValidationForPrimitiveProperty,
  C extends UserContext = UserContext
>(
  data: D,
  configArg?: ValidationConfig,
  context?: C
) => {
  const config = <ValidationConfig>mergeDeep({}, getConfig(), configArg ?? {});
  const errors: ValidationError[] = [];

  try {
  } catch (err) {
    if (!(err instanceof ValidationError)) {
      throw err;
    }

    errors.push(err);

    if (config.stopAtFirstError) {
      throw new ValidationException(errors);
    }
  }

  if (errors.length) {
    throw new ValidationException(errors);
  }
};

export const ignoreValidationForPrimitivePropertyWithOtherDecoratorsValidator: GeneratedValidation = <
  D extends Data = typeof IgnoreValidationForPrimitivePropertyWithOtherDecorators,
  C extends UserContext = UserContext
>(
  data: D,
  configArg?: ValidationConfig,
  context?: C
) => {
  const config = <ValidationConfig>mergeDeep({}, getConfig(), configArg ?? {});
  const errors: ValidationError[] = [];

  try {
  } catch (err) {
    if (!(err instanceof ValidationError)) {
      throw err;
    }

    errors.push(err);

    if (config.stopAtFirstError) {
      throw new ValidationException(errors);
    }
  }

  if (errors.length) {
    throw new ValidationException(errors);
  }
};

export const equalValidatorWithDefaultMessageValidator: GeneratedValidation = <
  D extends Data = typeof EqualValidatorWithDefaultMessage,
  C extends UserContext = UserContext
>(
  data: D,
  configArg?: ValidationConfig,
  context?: C
) => {
  const config = <ValidationConfig>mergeDeep({}, getConfig(), configArg ?? {});
  const errors: ValidationError[] = [];

  try {
    typeValidator({
      property: data?.someProperty,
      propertyName: 'someProperty',
      data,
      config,
      context,

      type: 'string'
    });

    equalValidator({
      property: data?.someProperty,
      propertyName: 'someProperty',
      data,
      config,
      context,

      value: 'abcdef'
    });
  } catch (err) {
    if (!(err instanceof ValidationError)) {
      throw err;
    }

    errors.push(err);

    if (config.stopAtFirstError) {
      throw new ValidationException(errors);
    }
  }

  if (errors.length) {
    throw new ValidationException(errors);
  }
};

export const equalValidatorWithCustomMessageValidator: GeneratedValidation = <
  D extends Data = typeof EqualValidatorWithCustomMessage,
  C extends UserContext = UserContext
>(
  data: D,
  configArg?: ValidationConfig,
  context?: C
) => {
  const config = <ValidationConfig>mergeDeep({}, getConfig(), configArg ?? {});
  const errors: ValidationError[] = [];

  try {
    typeValidator({
      property: data?.someProperty,
      propertyName: 'someProperty',
      data,
      config,
      context,

      type: 'number'
    });

    equalValidator({
      property: data?.someProperty,
      propertyName: 'someProperty',
      data,
      config,
      context,

      value: 245,

      customMessage: 'equal custom message'
    });
  } catch (err) {
    if (!(err instanceof ValidationError)) {
      throw err;
    }

    errors.push(err);

    if (config.stopAtFirstError) {
      throw new ValidationException(errors);
    }
  }

  if (errors.length) {
    throw new ValidationException(errors);
  }
};

export const equalValidatorForBooleanValidator: GeneratedValidation = <
  D extends Data = typeof EqualValidatorForBoolean,
  C extends UserContext = UserContext
>(
  data: D,
  configArg?: ValidationConfig,
  context?: C
) => {
  const config = <ValidationConfig>mergeDeep({}, getConfig(), configArg ?? {});
  const errors: ValidationError[] = [];

  try {
    typeValidator({
      property: data?.someProperty,
      propertyName: 'someProperty',
      data,
      config,
      context,

      type: 'boolean'
    });

    equalValidator({
      property: data?.someProperty,
      propertyName: 'someProperty',
      data,
      config,
      context,

      value: true
    });
  } catch (err) {
    if (!(err instanceof ValidationError)) {
      throw err;
    }

    errors.push(err);

    if (config.stopAtFirstError) {
      throw new ValidationException(errors);
    }
  }

  if (errors.length) {
    throw new ValidationException(errors);
  }
};

export const equalToValidatorWithDefaultMessageValidator: GeneratedValidation = <
  D extends Data = typeof EqualToValidatorWithDefaultMessage,
  C extends UserContext = UserContext
>(
  data: D,
  configArg?: ValidationConfig,
  context?: C
) => {
  const config = <ValidationConfig>mergeDeep({}, getConfig(), configArg ?? {});
  const errors: ValidationError[] = [];

  try {
    typeValidator({
      property: data?.someProperty,
      propertyName: 'someProperty',
      data,
      config,
      context,

      type: 'string'
    });

    equalToValidator({
      property: data?.someProperty,
      propertyName: 'someProperty',
      data,
      config,
      context,

      targetPropertyName: 'someOtherProperty'
    });

    typeValidator({
      property: data?.someOtherProperty,
      propertyName: 'someOtherProperty',
      data,
      config,
      context,

      type: 'string'
    });

    equalToValidator({
      property: data?.someOtherProperty,
      propertyName: 'someOtherProperty',
      data,
      config,
      context,

      targetPropertyName: 'someProperty'
    });
  } catch (err) {
    if (!(err instanceof ValidationError)) {
      throw err;
    }

    errors.push(err);

    if (config.stopAtFirstError) {
      throw new ValidationException(errors);
    }
  }

  if (errors.length) {
    throw new ValidationException(errors);
  }
};
"
`;

exports[`codegen/raw/common parse & prepare: data for render 1`] = `
Array [
  Object {
    "fileName": "model.ts",
    "filePath": "src/generated/validators",
    "imports": Array [
      Object {
        "clauses": "GeneratedValidation, ValidationConfig, ValidationError, ValidationException, Data, UserContext, getConfig, mergeDeep, typeValidator, customValidator, equalValidator, equalToValidator",
        "path": "ts-generate-validator",
      },
      Object {
        "clauses": "TypeValidatorWithCustomMessage, TypeValidatorOnNestedPropertyType, TypeValidatorOnNullPropertyType, TypeValidatorOnImportedEnumPropertyType, CustomValidatorFailed, CutomValidatorSuccess, CutomValidatorOnNonPrimitiveStructure, CutomValidatorSuccessAsync, CutomValidatorImported, customValidationFuncExported, CutomValidatorExported, CutomValidatorWhichUsesImportedEntity, IgnoreValidationForNonPrimitiveProperty, IgnoreValidationForPrimitiveProperty, IgnoreValidationForPrimitivePropertyWithOtherDecorators, EqualValidatorWithDefaultMessage, EqualValidatorWithCustomMessage, EqualValidatorForBoolean, EqualToValidatorWithDefaultMessage",
        "path": "./../../../model",
      },
      Object {
        "clauses": "UserType",
        "path": "./../../../../../user/type/model",
      },
      Object {
        "clauses": "customValidationFuncImported, someEntityUsedInCustomValidator",
        "path": "./../../../customValidationFunc",
      },
      Object {
        "clauses": "ValidationError",
        "path": "./../../../../../../../src",
      },
    ],
    "validations": Array [
      Object {
        "async": false,
        "items": Array [
          Object {
            "propertyName": "someProperty",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "customMessage",
                "type": "string",
                "value": "type custom message",
              },
              Object {
                "property": "type",
                "type": "string",
                "value": "string",
              },
            ],
          },
        ],
        "modelClassName": "TypeValidatorWithCustomMessage",
        "name": "typeValidatorWithCustomMessageValidator",
      },
      Object {
        "async": false,
        "items": Array [
          Object {
            "propertyName": "someProperty",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "customMessage",
                "type": "string",
                "value": "type custom message",
              },
              Object {
                "property": "typeDescription",
                "type": "object",
                "value": "customValidatorFailedValidator",
              },
              Object {
                "property": "type",
                "type": "string",
                "value": "nested",
              },
            ],
          },
        ],
        "modelClassName": "TypeValidatorOnNestedPropertyType",
        "name": "typeValidatorOnNestedPropertyTypeValidator",
      },
      Object {
        "async": false,
        "items": Array [
          Object {
            "propertyName": "someProperty",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "null",
              },
            ],
          },
        ],
        "modelClassName": "TypeValidatorOnNullPropertyType",
        "name": "typeValidatorOnNullPropertyTypeValidator",
      },
      Object {
        "async": false,
        "items": Array [
          Object {
            "propertyName": "someProperty",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "typeDescription",
                "type": "object",
                "value": "UserType",
              },
              Object {
                "property": "type",
                "type": "string",
                "value": "enum",
              },
            ],
          },
        ],
        "modelClassName": "TypeValidatorOnImportedEnumPropertyType",
        "name": "typeValidatorOnImportedEnumPropertyTypeValidator",
      },
      Object {
        "async": false,
        "items": Array [
          Object {
            "propertyName": "someProperty",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "number",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "someProperty",
            "validatorName": "customValidator",
            "validatorPayload": Array [
              Object {
                "property": "customValidationFunction",
                "type": "",
                "value": "() => {
    throw new Error('Failed!');
  }",
              },
            ],
          },
        ],
        "modelClassName": "CustomValidatorFailed",
        "name": "customValidatorFailedValidator",
      },
      Object {
        "async": false,
        "items": Array [
          Object {
            "propertyName": "someProperty",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "number",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "someProperty",
            "validatorName": "customValidator",
            "validatorPayload": Array [
              Object {
                "property": "customValidationFunction",
                "type": "",
                "value": "() => undefined",
              },
            ],
          },
        ],
        "modelClassName": "CutomValidatorSuccess",
        "name": "cutomValidatorSuccessValidator",
      },
      Object {
        "async": false,
        "items": Array [
          Object {
            "async": false,
            "propertyName": "someProperty",
            "validatorName": "customValidator",
            "validatorPayload": Array [
              Object {
                "property": "customValidationFunction",
                "type": "",
                "value": "() => undefined",
              },
            ],
          },
        ],
        "modelClassName": "CutomValidatorOnNonPrimitiveStructure",
        "name": "cutomValidatorOnNonPrimitiveStructureValidator",
      },
      Object {
        "async": true,
        "items": Array [
          Object {
            "propertyName": "someProperty",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "number",
              },
            ],
          },
          Object {
            "async": true,
            "propertyName": "someProperty",
            "validatorName": "customValidator",
            "validatorPayload": Array [
              Object {
                "property": "customValidationFunction",
                "type": "",
                "value": "async (): Promise<void> => new Promise((resolve) => setTimeout(() => resolve(), 300))",
              },
            ],
          },
        ],
        "modelClassName": "CutomValidatorSuccessAsync",
        "name": "cutomValidatorSuccessAsyncValidator",
      },
      Object {
        "async": false,
        "items": Array [
          Object {
            "propertyName": "someProperty",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "number",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "someProperty",
            "validatorName": "customValidator",
            "validatorPayload": Array [
              Object {
                "property": "customValidationFunction",
                "type": "",
                "value": "customValidationFuncImported",
              },
            ],
          },
        ],
        "modelClassName": "CutomValidatorImported",
        "name": "cutomValidatorImportedValidator",
      },
      Object {
        "async": false,
        "items": Array [
          Object {
            "propertyName": "someProperty",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "number",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "someProperty",
            "validatorName": "customValidator",
            "validatorPayload": Array [
              Object {
                "property": "customValidationFunction",
                "type": "",
                "value": "customValidationFuncExported",
              },
            ],
          },
        ],
        "modelClassName": "CutomValidatorExported",
        "name": "cutomValidatorExportedValidator",
      },
      Object {
        "async": false,
        "items": Array [
          Object {
            "propertyName": "someProperty",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "number",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "someProperty",
            "validatorName": "customValidator",
            "validatorPayload": Array [
              Object {
                "property": "customValidationFunction",
                "type": "",
                "value": "({ property, propertyName }) => {
    if (property !== someEntityUsedInCustomValidator) {
      throw new ValidationError(propertyName as string, 'some error message');
    }
  }",
              },
            ],
          },
        ],
        "modelClassName": "CutomValidatorWhichUsesImportedEntity",
        "name": "cutomValidatorWhichUsesImportedEntityValidator",
      },
      Object {
        "async": false,
        "items": Array [],
        "modelClassName": "IgnoreValidationForNonPrimitiveProperty",
        "name": "ignoreValidationForNonPrimitivePropertyValidator",
      },
      Object {
        "async": false,
        "items": Array [],
        "modelClassName": "IgnoreValidationForPrimitiveProperty",
        "name": "ignoreValidationForPrimitivePropertyValidator",
      },
      Object {
        "async": false,
        "items": Array [],
        "modelClassName": "IgnoreValidationForPrimitivePropertyWithOtherDecorators",
        "name": "ignoreValidationForPrimitivePropertyWithOtherDecoratorsValidator",
      },
      Object {
        "async": false,
        "items": Array [
          Object {
            "propertyName": "someProperty",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "string",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "someProperty",
            "validatorName": "equalValidator",
            "validatorPayload": Array [
              Object {
                "property": "value",
                "type": "string",
                "value": "abcdef",
              },
            ],
          },
        ],
        "modelClassName": "EqualValidatorWithDefaultMessage",
        "name": "equalValidatorWithDefaultMessageValidator",
      },
      Object {
        "async": false,
        "items": Array [
          Object {
            "propertyName": "someProperty",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "number",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "someProperty",
            "validatorName": "equalValidator",
            "validatorPayload": Array [
              Object {
                "property": "value",
                "type": "number",
                "value": "245",
              },
              Object {
                "property": "customMessage",
                "type": "string",
                "value": "equal custom message",
              },
            ],
          },
        ],
        "modelClassName": "EqualValidatorWithCustomMessage",
        "name": "equalValidatorWithCustomMessageValidator",
      },
      Object {
        "async": false,
        "items": Array [
          Object {
            "propertyName": "someProperty",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "boolean",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "someProperty",
            "validatorName": "equalValidator",
            "validatorPayload": Array [
              Object {
                "property": "value",
                "type": "boolean",
                "value": "true",
              },
            ],
          },
        ],
        "modelClassName": "EqualValidatorForBoolean",
        "name": "equalValidatorForBooleanValidator",
      },
      Object {
        "async": false,
        "items": Array [
          Object {
            "propertyName": "someProperty",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "string",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "someProperty",
            "validatorName": "equalToValidator",
            "validatorPayload": Array [
              Object {
                "property": "targetPropertyName",
                "type": "string",
                "value": "someOtherProperty",
              },
            ],
          },
          Object {
            "propertyName": "someOtherProperty",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "string",
                "value": "string",
              },
            ],
          },
          Object {
            "async": false,
            "propertyName": "someOtherProperty",
            "validatorName": "equalToValidator",
            "validatorPayload": Array [
              Object {
                "property": "targetPropertyName",
                "type": "string",
                "value": "someProperty",
              },
            ],
          },
        ],
        "modelClassName": "EqualToValidatorWithDefaultMessage",
        "name": "equalToValidatorWithDefaultMessageValidator",
      },
    ],
  },
]
`;

exports[`codegen/raw/common parse & prepare: parsed metadata 1`] = `
Array [
  Object {
    "classes": Array [],
    "functions": Array [
      Object {
        "isExported": true,
        "name": "customValidationFuncImported",
      },
    ],
    "imports": Array [],
    "name": "customValidationFunc.ts",
  },
  Object {
    "classes": Array [
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  "type custom message",
                ],
                "name": "TypeValidation",
              },
            ],
            "name": "someProperty",
            "optional": false,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
        ],
        "name": "TypeValidatorWithCustomMessage",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  "type custom message",
                ],
                "name": "TypeValidation",
              },
            ],
            "name": "someProperty",
            "optional": true,
            "type": Object {
              "name": "CustomValidatorFailed",
              "referencePath": "model.ts",
              "validationType": "nested",
            },
          },
        ],
        "name": "TypeValidatorOnNestedPropertyType",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [],
            "name": "someProperty",
            "optional": false,
            "type": Object {
              "name": "null",
              "validationType": "null",
            },
          },
        ],
        "name": "TypeValidatorOnNullPropertyType",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [],
            "name": "someProperty",
            "optional": true,
            "type": Object {
              "name": "UserType",
              "referencePath": "../../user/type/model",
              "validationType": "enum",
            },
          },
        ],
        "name": "TypeValidatorOnImportedEnumPropertyType",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  "() => {
    throw new Error('Failed!');
  }",
                ],
                "name": "CustomValidation",
              },
            ],
            "name": "someProperty",
            "optional": true,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
        ],
        "name": "CustomValidatorFailed",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  "() => undefined",
                ],
                "name": "CustomValidation",
              },
            ],
            "name": "someProperty",
            "optional": true,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
        ],
        "name": "CutomValidatorSuccess",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  "() => undefined",
                ],
                "name": "CustomValidation",
              },
            ],
            "name": "someProperty",
            "optional": true,
            "type": Object {
              "name": "mock",
              "referencePath": "model.ts",
              "validationType": "notSupported",
            },
          },
        ],
        "name": "CutomValidatorOnNonPrimitiveStructure",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  "async (): Promise<void> => new Promise((resolve) => setTimeout(() => resolve(), 300))",
                ],
                "name": "CustomValidation",
              },
            ],
            "name": "someProperty",
            "optional": true,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
        ],
        "name": "CutomValidatorSuccessAsync",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  "customValidationFuncImported",
                ],
                "name": "CustomValidation",
              },
            ],
            "name": "someProperty",
            "optional": true,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
        ],
        "name": "CutomValidatorImported",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  "customValidationFuncExported",
                ],
                "name": "CustomValidation",
              },
            ],
            "name": "someProperty",
            "optional": true,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
        ],
        "name": "CutomValidatorExported",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  "({ property, propertyName }) => {
    if (property !== someEntityUsedInCustomValidator) {
      throw new ValidationError(propertyName as string, 'some error message');
    }
  }",
                ],
                "name": "CustomValidation",
              },
            ],
            "name": "someProperty",
            "optional": true,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
        ],
        "name": "CutomValidatorWhichUsesImportedEntity",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [],
                "name": "IgnoreValidation",
              },
            ],
            "name": "someProperty",
            "optional": true,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
        ],
        "name": "IgnoreValidationForNonPrimitiveProperty",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [],
                "name": "IgnoreValidation",
              },
            ],
            "name": "someProperty",
            "optional": false,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
        ],
        "name": "IgnoreValidationForPrimitiveProperty",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  10,
                ],
                "name": "MaxValidation",
              },
              Object {
                "arguments": Array [],
                "name": "IgnoreValidation",
              },
              Object {
                "arguments": Array [
                  2,
                ],
                "name": "MinValidation",
              },
            ],
            "name": "someProperty",
            "optional": false,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
        ],
        "name": "IgnoreValidationForPrimitivePropertyWithOtherDecorators",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  "abcdef",
                ],
                "name": "EqualValidation",
              },
            ],
            "name": "someProperty",
            "optional": false,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
        ],
        "name": "EqualValidatorWithDefaultMessage",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  245,
                  "equal custom message",
                ],
                "name": "EqualValidation",
              },
            ],
            "name": "someProperty",
            "optional": false,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
        ],
        "name": "EqualValidatorWithCustomMessage",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  true,
                ],
                "name": "EqualValidation",
              },
            ],
            "name": "someProperty",
            "optional": false,
            "type": Object {
              "name": "boolean",
              "validationType": "boolean",
            },
          },
        ],
        "name": "EqualValidatorForBoolean",
      },
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  "someOtherProperty",
                ],
                "name": "EqualToValidation",
              },
            ],
            "name": "someProperty",
            "optional": false,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  "someProperty",
                ],
                "name": "EqualToValidation",
              },
            ],
            "name": "someOtherProperty",
            "optional": false,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
        ],
        "name": "EqualToValidatorWithDefaultMessage",
      },
    ],
    "functions": Array [
      Object {
        "isExported": true,
        "name": "customValidationFuncExported",
      },
    ],
    "imports": Array [
      Object {
        "absPath": "../../user/type/model",
        "clauses": Array [
          "UserType",
        ],
      },
      Object {
        "absPath": "customValidationFunc",
        "clauses": Array [
          "customValidationFuncImported",
          "someEntityUsedInCustomValidator",
        ],
      },
      Object {
        "absPath": "../../../../src/decorators",
        "clauses": Array [
          "Validation",
          "CustomValidation",
          "EqualValidation",
          "EqualToValidation",
          "IgnoreValidation",
          "TypeValidation",
          "MinValidation",
          "MaxValidation",
        ],
      },
      Object {
        "absPath": "../../../../src",
        "clauses": Array [
          "ValidationError",
        ],
      },
    ],
    "name": "model.ts",
  },
  Object {
    "classes": Array [],
    "functions": Array [
      Object {
        "isExported": true,
        "name": "typeValidatorWithCustomMessageValidator",
      },
      Object {
        "isExported": true,
        "name": "typeValidatorOnNestedPropertyTypeValidator",
      },
      Object {
        "isExported": true,
        "name": "typeValidatorOnNullPropertyTypeValidator",
      },
      Object {
        "isExported": true,
        "name": "typeValidatorOnImportedEnumPropertyTypeValidator",
      },
      Object {
        "isExported": true,
        "name": "customValidatorFailedValidator",
      },
      Object {
        "isExported": true,
        "name": "customValidationFunction",
      },
      Object {
        "isExported": true,
        "name": "cutomValidatorSuccessValidator",
      },
      Object {
        "isExported": true,
        "name": "customValidationFunction",
      },
      Object {
        "isExported": true,
        "name": "cutomValidatorOnNonPrimitiveStructureValidator",
      },
      Object {
        "isExported": true,
        "name": "customValidationFunction",
      },
      Object {
        "isExported": true,
        "name": "cutomValidatorSuccessAsyncValidator",
      },
      Object {
        "isExported": true,
        "name": "customValidationFunction",
      },
      Object {
        "isExported": true,
        "name": "cutomValidatorImportedValidator",
      },
      Object {
        "isExported": true,
        "name": "cutomValidatorExportedValidator",
      },
      Object {
        "isExported": true,
        "name": "cutomValidatorWhichUsesImportedEntityValidator",
      },
      Object {
        "isExported": true,
        "name": "customValidationFunction",
      },
      Object {
        "isExported": true,
        "name": "ignoreValidationForNonPrimitivePropertyValidator",
      },
      Object {
        "isExported": true,
        "name": "ignoreValidationForPrimitivePropertyValidator",
      },
      Object {
        "isExported": true,
        "name": "ignoreValidationForPrimitivePropertyWithOtherDecoratorsValidator",
      },
      Object {
        "isExported": true,
        "name": "equalValidatorWithDefaultMessageValidator",
      },
      Object {
        "isExported": true,
        "name": "equalValidatorWithCustomMessageValidator",
      },
      Object {
        "isExported": true,
        "name": "equalValidatorForBooleanValidator",
      },
      Object {
        "isExported": true,
        "name": "equalToValidatorWithDefaultMessageValidator",
      },
    ],
    "imports": Array [
      Object {
        "absPath": "ts-generate-validator",
        "clauses": Array [
          "GeneratedValidation",
          "ValidationConfig",
          "ValidationError",
          "ValidationException",
          "Data",
          "UserContext",
          "getConfig",
          "mergeDeep",
          "typeValidator",
          "customValidator",
          "equalValidator",
          "equalToValidator",
        ],
      },
      Object {
        "absPath": "model",
        "clauses": Array [
          "TypeValidatorWithCustomMessage",
          "TypeValidatorOnNestedPropertyType",
          "TypeValidatorOnNullPropertyType",
          "TypeValidatorOnImportedEnumPropertyType",
          "CustomValidatorFailed",
          "CutomValidatorSuccess",
          "CutomValidatorOnNonPrimitiveStructure",
          "CutomValidatorSuccessAsync",
          "CutomValidatorImported",
          "customValidationFuncExported",
          "CutomValidatorExported",
          "CutomValidatorWhichUsesImportedEntity",
          "IgnoreValidationForNonPrimitiveProperty",
          "IgnoreValidationForPrimitiveProperty",
          "IgnoreValidationForPrimitivePropertyWithOtherDecorators",
          "EqualValidatorWithDefaultMessage",
          "EqualValidatorWithCustomMessage",
          "EqualValidatorForBoolean",
          "EqualToValidatorWithDefaultMessage",
        ],
      },
      Object {
        "absPath": "../../user/type/model",
        "clauses": Array [
          "UserType",
        ],
      },
      Object {
        "absPath": "customValidationFunc",
        "clauses": Array [
          "customValidationFuncImported",
          "someEntityUsedInCustomValidator",
        ],
      },
      Object {
        "absPath": "../../../../src",
        "clauses": Array [
          "ValidationError",
        ],
      },
    ],
    "name": "src/generated/validators/model.ts",
  },
  Object {
    "classes": Array [],
    "functions": Array [],
    "imports": Array [],
    "name": "../../user/type/model",
  },
  Object {
    "classes": Array [],
    "functions": Array [
      Object {
        "isExported": false,
        "name": "emptyDecorator",
      },
      Object {
        "isExported": true,
        "name": "RequiredOneOfValidation",
      },
      Object {
        "isExported": true,
        "name": "TypeValidation",
      },
      Object {
        "isExported": true,
        "name": "CustomValidation",
      },
      Object {
        "isExported": true,
        "name": "IgnoreValidation",
      },
      Object {
        "isExported": true,
        "name": "EqualValidation",
      },
      Object {
        "isExported": true,
        "name": "EqualToValidation",
      },
      Object {
        "isExported": true,
        "name": "MinValidation",
      },
      Object {
        "isExported": true,
        "name": "MaxValidation",
      },
      Object {
        "isExported": true,
        "name": "NegativeValidation",
      },
      Object {
        "isExported": true,
        "name": "PositiveValidation",
      },
      Object {
        "isExported": true,
        "name": "IntegerValidation",
      },
      Object {
        "isExported": true,
        "name": "FloatValidation",
      },
      Object {
        "isExported": true,
        "name": "LessThanValidation",
      },
      Object {
        "isExported": true,
        "name": "MoreThanValidation",
      },
      Object {
        "isExported": true,
        "name": "TrimValidation",
      },
      Object {
        "isExported": true,
        "name": "LowercaseValidation",
      },
      Object {
        "isExported": true,
        "name": "UppercaseValidation",
      },
      Object {
        "isExported": true,
        "name": "MinLengthValidation",
      },
      Object {
        "isExported": true,
        "name": "MaxLengthValidation",
      },
      Object {
        "isExported": true,
        "name": "EmailValidation",
      },
      Object {
        "isExported": true,
        "name": "UrlValidation",
      },
      Object {
        "isExported": true,
        "name": "MatchValidation",
      },
    ],
    "imports": Array [
      Object {
        "absPath": "../../../../validators/model",
        "clauses": Array [
          "CustomValidationFunction",
        ],
      },
      Object {
        "absPath": "../../../../codegen/model",
        "clauses": Array [
          "Data",
        ],
      },
      Object {
        "absPath": "../../../../localization/model",
        "clauses": Array [
          "Message",
        ],
      },
    ],
    "name": "../../../../src/decorators",
  },
  Object {
    "classes": Array [],
    "functions": Array [],
    "imports": Array [],
    "name": "../../../../src",
  },
  Object {
    "classes": Array [],
    "functions": Array [],
    "imports": Array [],
    "name": "../../user/type/model",
  },
  Object {
    "classes": Array [],
    "functions": Array [],
    "imports": Array [],
    "name": "../../../../src",
  },
]
`;
