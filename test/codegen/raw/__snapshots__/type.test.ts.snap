// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`codegen/raw/type create validators: generated validators at "generated/validators/subfolder_#1.subfolder_#2.model.ts" 1`] = `
"import {
  GeneratedValidation,
  GeneratedValidationPayload,
  UserContext,
  initConfig,
  getConfig,
  mergeDeep,
  typeValidator
} from 'ts-generate-validator';

import {
  ClassWithNonPrimitiveProperty,
  SomeEnum,
  ClassWithEnumProperty
} from './../../subfolder #1/subfolder #2/model';

import * as configFromFile from './../../ts-generate-validator-config.json';

initConfig(configFromFile);

export const classWithNonPrimitivePropertyValidator: GeneratedValidation = (
  payload: GeneratedValidationPayload<typeof ClassWithNonPrimitiveProperty, UserContext>
) => {
  // eslint-disable-next-line
  const config = mergeDeep({}, getConfig(), payload.config);
};

export const classWithEnumPropertyValidator: GeneratedValidation = (
  payload: GeneratedValidationPayload<typeof ClassWithEnumProperty, UserContext>
) => {
  const config = mergeDeep({}, getConfig(), payload.config);

  typeValidator({
    property: payload.data.someProperty,
    propertyName: 'someProperty',
    data: payload.data,
    config,

    typeDescription: SomeEnum,

    type: 'enum'
  });
};
"
`;

exports[`codegen/raw/type parse & prepare: data for render 1`] = `
Array [
  Object {
    "configFilePath": "./../../ts-generate-validator-config.json",
    "fileName": "subfolder_#1.subfolder_#2.model.ts",
    "filePath": "generated\\\\validators",
    "imports": Array [
      Object {
        "clauses": "GeneratedValidation, GeneratedValidationPayload, UserContext, initConfig, getConfig, mergeDeep, typeValidator",
        "path": "ts-generate-validator",
      },
      Object {
        "clauses": "ClassWithNonPrimitiveProperty, SomeEnum, ClassWithEnumProperty",
        "path": "./../../subfolder #1/subfolder #2/model",
      },
    ],
    "validationArgs": Object {
      "config": "config",
      "data": "data",
    },
    "validations": Array [
      Object {
        "async": false,
        "items": Array [],
        "modelClassName": "ClassWithNonPrimitiveProperty",
        "name": "classWithNonPrimitivePropertyValidator",
      },
      Object {
        "async": false,
        "items": Array [
          Object {
            "propertyName": "someProperty",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "typeDescription",
                "type": "object",
                "value": "SomeEnum",
              },
              Object {
                "property": "type",
                "type": "string",
                "value": "enum",
              },
            ],
          },
        ],
        "modelClassName": "ClassWithEnumProperty",
        "name": "classWithEnumPropertyValidator",
      },
    ],
  },
]
`;
