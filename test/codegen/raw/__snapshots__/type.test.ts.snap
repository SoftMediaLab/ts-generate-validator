// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`codegen/raw/type create validators: generated validators at "generated/validators/subfolder_#1.subfolder_#2.model.ts" 1`] = `
"/*Codegen*/
// tslint:disable
/* eslint-disable */

import {
  GeneratedValidation,
  GeneratedValidationPayload,
  ValidationConfig,
  UserContext,
  getConfig,
  mergeDeep,
  typeValidator
} from 'ts-generate-validator';

import {
  ClassWithNonPrimitiveProperty,
  SomeEnum,
  ClassWithEnumProperty
} from './../../subfolder #1/subfolder #2/model';

export const classWithNonPrimitivePropertyValidator: GeneratedValidation = <
  D extends Record<string, any> = typeof ClassWithNonPrimitiveProperty,
  C extends UserContext = UserContext
>(
  data: D,
  configArg?: ValidationConfig = {},
  context?: C = undefined
) => {
  // eslint-disable-next-line
  const config = mergeDeep({}, getConfig(), configArg);
};

export const classWithEnumPropertyValidator: GeneratedValidation = <
  D extends Record<string, any> = typeof ClassWithEnumProperty,
  C extends UserContext = UserContext
>(
  data: D,
  configArg?: ValidationConfig = {},
  context?: C = undefined
) => {
  const config = mergeDeep({}, getConfig(), configArg);

  typeValidator({
    property: data?.someProperty,
    propertyName: 'someProperty',
    data: data,
    config,
    context,

    typeDescription: SomeEnum,

    type: 'enum'
  });
};
"
`;

exports[`codegen/raw/type parse & prepare: data for render 1`] = `
Array [
  Object {
    "fileName": "subfolder_#1.subfolder_#2.model.ts",
    "filePath": "generated/validators",
    "imports": Array [
      Object {
        "clauses": "GeneratedValidation, GeneratedValidationPayload, ValidationConfig, UserContext, getConfig, mergeDeep, typeValidator",
        "path": "ts-generate-validator",
      },
      Object {
        "clauses": "ClassWithNonPrimitiveProperty, SomeEnum, ClassWithEnumProperty",
        "path": "./../../subfolder #1/subfolder #2/model",
      },
    ],
    "validations": Array [
      Object {
        "async": false,
        "items": Array [],
        "modelClassName": "ClassWithNonPrimitiveProperty",
        "name": "classWithNonPrimitivePropertyValidator",
      },
      Object {
        "async": false,
        "items": Array [
          Object {
            "propertyName": "someProperty",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "typeDescription",
                "type": "object",
                "value": "SomeEnum",
              },
              Object {
                "property": "type",
                "type": "string",
                "value": "enum",
              },
            ],
          },
        ],
        "modelClassName": "ClassWithEnumProperty",
        "name": "classWithEnumPropertyValidator",
      },
    ],
  },
]
`;
